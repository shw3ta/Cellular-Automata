import streamlit as st
import pandas as pd 
import numpy as np 
from PIL import Image
import base64
import random
import os


def app():
	class E_CA:

		def __init__(self, length, IV, ruleset, gens):
			self.ruleset = ruleset
			self.length = length
			self.cells = IV
			self.generations = gens
			
		def rule_id(self, triple):
			L, C, R = triple
			s = str(int(L)) + str(int(C)) + str(int(R))
			index = int(s, 2) # parse a binary number not decimal

			return index

		def run_automaton(self):
			ruleset = self.ruleset

			history = np.zeros((self.generations, self.length)) # 2D array
			#print(history.shape)
			history[0, :] = self.cells # start here

			for gen in range(1, self.generations):
				all_triples = np.stack(
					[
					np.roll(history[gen - 1, :], 1),
					history[gen - 1, :],
					np.roll(history[gen - 1, :], -1)
					]
					)
				#print(np.apply_along_axis(self.rule_id, 0, all_triples))

				temp = []
				for i in np.apply_along_axis(self.rule_id, 0, all_triples):
					temp.append(ruleset[i])

				temp = np.array(temp, dtype=np.int64)

				history[gen, :] = temp

			return history, None, None	

	def plot_sim(data):
		import matplotlib.pyplot as plt 
		plt.rcParams['image.cmap'] = 'binary'

		fig, ax = plt.subplots(figsize=(16, 9))
		ax.matshow(data)
		ax.axis(False)

		st.pyplot(fig)

	st.title("Explore Elementary Cellular Automata")

	st.write("""

		All the patterns that you have seen thus far have been generated by us. You can set the parameters yourselves
		and explore the variety of patterns that can be generated using simple rules.

		Remember: $1$-D automata, $2$ possible states per cell in the IV and rules defined based on only the nearest $2$ neighbours' states. 
		You get to choose the number of generations you want to observe, and the IV you want to use to generate the patterns. 
		Get creative!
		""")

	gens = st.number_input("Enter the number of generations you want to observe:", 500)
	if type(gens) != int:
		st.write("""
			Invalid entry, enter an integer.
			""")

	rule = st.number_input("Enter the transition rule number (range 1 - 256):", 1)
	if type(rule) != int or rule > 256 or rule <1: 
		st.write("""
			Invalid entry, enter an integer within range.
			""")

	f_path = os.path.join(os.path.dirname(__file__), 'rules.txt')
	f = open(f_path, "r")

	ruleset_str = f.readlines()[rule][: : -1] #reversing to avoid incorrect mapping
	#print(ruleset_str)
	ruleset = [char for char in ruleset_str][1:] # first char in this list is '\n' so reading from char 2 on
	#print(self.ruleset)
	f.close()	

	IV_choice = st.selectbox("Choose from the following options of IVs:", ("random", "only central cell is 1", "only central cell is 0", "enter my own IV"))

	IV = None
	length = None

	if IV_choice != "enter my own IV":
		length = st.number_input("Enter the length of the IV you want to generate:", 397)

		if IV_choice == "random":
			IV = np.random.randint(0, 2, length)

		elif IV_choice == "only central cell is 1":
			IV = np.zeros(length, dtype=np.int64)
			m = (length//2) - 1
			IV[m] = 1

		elif IV_choice == "only central cell is 0":
			IV = np.ones(length, dtype=np.int64)
			m = (length//2) - 1
			IV[m] = 0
	else:
		IV = st.text_input("Enter your IV here:", "100110101001111110011100110010100101010011111101010010101")
		
		IV = np.array([int(ch) for ch in IV])
		length = len(IV)


	if st.button("Run"):
		CA = E_CA(length, IV, ruleset, gens)
		data, _, _ = CA.run_automaton()
		plot_sim(data)	


	st.markdown("""---""")
